
충돌은 해시함수특성상 일어날 수 있음 ( 충돌이 일어날 경우 버킷의 그 다음 슬롯으로 들어가면됨)
but! 오버플로우를 제어할 방법을 찾아야함(버킷의 슬롯을 다 채운뒤에도 그 버킷을 배정받을경우)



제산함수는 k mod M을 이용하는데

소수로 사용해야하는 이유는 소수가 아닌 거듭제곱꼴이나 소수의 곱셈된 정수를 mod로사용시에 같은 값이 나올 가능성이 생기기때문에


해시에서 개방주소법 오버플로우 해결방법중 하나는 선형조사법인데 선형조사법의 문제는 군집화임
-> 선형조사법은 자료가 입력될수록 충돌될 가능성이 높아짐(중간에 공간이 비지 않기 때문에)

즉, 해시를 사용하는 이유는 주소값을 바로 찾아내기 위해서이지만 그 주소에서 선형조사법에의해 변경된주소를 찾아야하는데
군집화로 인해 해시를 통해 찾은 주소와 찾을 값의 거리가 멀어지기 때문에 해시함수의 사용 이유가 줄어들게됨(시간복잡도가 최대 n번까지 상승 가능)





해시태그는 한번도 사용되지 않은 주소와 사용되었다가 삭제된 주소를 다르게 표현해야만 삭제연산이나 검색연산이 가능하다(중요!!!!)















체이닝에서는 충돌이 일어날지라도 오버플로우는 일어나지 않음(왜냐? -> 기존에 버킷들을 각각 연결리스트의 배열로 만든 후 각 버킷에 입력 필요시 다음 노드로 연결하면됨

새로운 학생은 굳이 맨 뒤가 아니라 insertfirst를 통해 맨 앞에 작성함