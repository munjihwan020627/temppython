트리: 정점과 간선의 집합 G = (V,E)꼴

루트 노드: 제일 꼭대기의 노드(서브트리에서의 )

단말노드: 트리에서 맨 아래의 노드(각 노드의 다음이 없는 노드) -> 외부 노드: 자식노드가 없는 노드(단말노드, 리프 노드)

비단말노드: 트리에서 맨 아래의 노드가 아닌 노드(각 노드의 다음이 없는 노드) -> 내부 노드: 하나 이상의 자식노드를 가지고 있는 노드

부모노드: 자식노드가 연결되어 있는 노드

자식노드: 부모노드와 연결되어있는 노드

형제노드: 같은 부모를 가진 노드

노드의 차수: 각각의 개별노드가 가지고 있는 자식의 개수

트리의 차수: 루트노드가 가지고 있는 자식의 개수


레벨: 자식의 자식의 자식의 ... 해서 자식 이라는 단어가 나오는 횟수 + 1

높이: 노드의 깊이라고 생각하면 되며 루트노드에서 각각의 리프노드까지 가는 간선의 갯수의 최대값             log 2 N을 가짐


포화 이진 트리: 트리의 각 레벨에 노드가 가득 차있는 이진 트리  (포화 이진 트리는 완전 이진 트리를 만족함)
2**트리의 레벨 - 1  개의 노드를 가지는 트리


완전 이진 트리: 높이가 h일때 h-1레벨까지는 포화이진트리를 만족하며 마지막레벨 h에서는 노드가 순서대로 채워지는트리


<특징>

모든 노드는 부모 노드인 한개의 노드만과 연결되어있음(아래에서 위로 올라가는 선은 한개 밖에 존재하지 않음)
각각의 노드는 두명의 자식을 가지는 트리를 이진트리라고 함

형제노드끼리의 직접적인 연결고리가 없기 때문에 부모노드로 다시 나와서 접근해야함

형제노드에서의 이동시 반드시!!!!!! 왼쪽에서 오른쪽으로 이동하는 방향이어야함 and 자식노드는 반드시 그 부모의 형제노드보다 후순위에 있어야함



노드의 개수가 n개인 경우에 간선의 개수는 반드시 n -1 개임
높이가 h라면 최소 h개의 노드, 2**h-1개의 노드를 가짐

높이가 h이면서 h개의 노드를 가지는 트리를 편향이진트리라고 하며 최악의 경우를 가짐


반대로 노두의 개수가 n개인 경우에 이진트리의 높이는
최소 log2 (N+1)개의 노드, 최대는 n개의 노드를 가짐



{배열표현법}





자식 인덱스 // 2 = 부모
그 부모의 인덱스 * 2 = 왼쪽 자식
그 부모의 인덱스 * 2 + 1 = 오른쪽 자식












{링크표현법}

왼쪽자식을 왼쪽포인터로,오른쪽 자식을 오른쪽 포인터로 구현함

L -> go left
V -> get value
R -> go right

순회를 하면서 검색을 할때 해당되는 방법중 한가지를 사용해야함
1.  V L R: 전위순회
2.  L V R: 중위순회
3.  L R V: 후위순회


검색 중 순환문을 탈출하기 위한 조건은 둘 중 하나임
1. 해당 값을 찾은경우
2. 그 노드의 값이 None인 경우





























레벨순회


1. 큐를 레벨 1의 루트노드를 집어넣음
2. while 큐가 not emtpy일때까지 deque
    2-1. 노드의 왼쪽을 enque
    2-2. 노드의 오른쪽을 enque

ps 이러면 루트노드를 뽑을때 루트노드의 왼쪽 enque, 오른쪽 enque되고 empty가 됨
   그러면 레벨 2의 왼쪽 노드 한개를 deque하면서 그 왼쪽 노드를 루트노드로 삼는 왼쪽노드와 오른쪽 노드를 enque
   그러면 레벨 2의 오른쪽 노드 한개를 deque하면서 그 오른쪽 노드를 루트노드로 삼는 왼쪽노드와 오른쪽 노드를 enque

   따라서 큐에는 레벨3의 노드가 존재하고 있음





트리에서의 연산은 트리에 높이에 비례함
힙 트리의 제약조건상 한쪽이 치우쳐지는 트리는 만들어지지 않지만
이진 탐색 트리의 경우엔 루트노드의 키값이 다른 루트노드의 키값보다 매우 크거나 작다면 편향 이진트리가 만들어져서 효율적 탐색이 불가능함

ex) 1~ 100 까지의 숫자중에 49을 찾아야하는데 루트노드로 100라는 값에 접근하게 된다면 본인, 왼쪽, 오른쪽, 본인의 부모, 부모의 왼쪽, 부모의 오른쪽, 형제노드, 형제노드의 왼쪽, 형제노드의 오른쪽 ... 이런식으로 왼쪽까지 쭉~~~~~~~~~~가야만 검색을 할 수 있다!



우선순위 큐를 구현하기 위해서 힙 트리를 사용함

최대 힙과 최소 힙
최대 힙: 우선순위를 키 값이 큰것으로 할 예정인지
최소 힙: 우선순위를 키 값이 작은것으로 할 예정인지


부모기준에서 자식은 공집합, 한개, 두개중에 하나임
최대 힙:모든 부모노드의 데이터는 본인의 자식노드의 데이터보다 키 값이 큼    -> 완벽한 정렬은 되어있지 않음(루트노드는 가장 큰값을 가짐) => 가장 손쉽게 Max값을 얻어낼 수 있음
ps. 힙 트리에서는 중복 값을 가질 수 있음!  AND 완전이진트리여야함(마지막 레벨-1 까지는 포화이진트리, 그 이후는 맨 왼쪽부터 채우기)

최소 힙:모든 부모노드의 데이터는 본인의 자식노드의 데이터보다 키 값이 작음   -> 완벽한 정렬은 되어있지 않음(루트노드는 가장 작은 값을 가짐) => 가장 손쉽게 Min값을 얻어낼 수 있음
ps. 힙 트리에서는 중복 값을 가질 수 있음!  AND 완전이진트리여야함(마지막 레벨-1 까지는 포화이진트리, 그 이후는 맨 왼쪽부터 채우기)


맨꼭대기에서 내려오면서 본인의 데이터값이 더 크다면 기존에 있던 노드를 끊어버리고 본인 데이터가 그 데이터 있던자리로 가고 연결시키고 그 데이터를 한칸내려버림

up hip 연산

